
How about that time you had a hash mismatch error when compiling haskell stuff?
  This package was the one that was erroring out:

  hash mismatch importing path '/nix/store/348fk05hmlzb68jdh86vmzd0hj8s8g3z-openjdk-16+36';
    wanted: sha256:1kxrwmm0mp76241br4b0c6bw77jczw5nabx1vmxpsb2syl97zdrn
    got:    sha256:1wlymf030vykc3zaqzi5m1z94v6wwx08nwaknb1hi5z6fy5494ml

  Did a:
    nix-store --delete /nix/store/348fk05hmlzb68jdh86vmzd0hj8s8g3z-openjdk-16+36
  and then
    nix-store --realise /nix/store/nj92iz8d6cirfdy97bkwi2am6mprs9y3-web-minify-research-ui.drv

    (Didn't work but this is a thing you can do)


|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|

Ways to handle interface tests properly:
- research mockall
  mocks force better design thinking~
    replace a concrete implementation to one that allows anything of a certain type to attach
      Want bi-directional communication that can also take socket information
- research pty
  Good to know how to do but you probably only want to mockall for this
= what happens if the client is writing and goes away
= what if it takes time to respond


- reapi for gambit-driver
  review workbooks that exist (nonverbal feedback)
    Do they have strange workarounds for things?
    Do they have to do awakward things?
  get feedback from people who use it
  Think about reducing it to a single command that can be sent without any parameters
    Remember that the gambit-config.yaml is part of the interface; think about what can be actually moved in there and used
  Write out on notion, go back and review. Think. Review. Write. Think. Write.


==================================================
YOU WANT SOME GOOGLE SHEETS HOTKEYS?
Yeah you do.
The important part is to 
  Left Alt + I (shift + i) //to activate insert
    r //for rows
    a | b //for above | below

Some tools~
  Spectrogram: needs to draw and read audio files, maybe open a window

  file - will tell what kind of file a file is!
  hexyl - look at the hex of a file
  hexedit - edit the hex of a file in a terminal (here be dragons)
    (it looks a bit rough, there may be a better tool)
  xxd - hex editor that a lot of people seem to use?
    Ok, it creates a hex dump from stdin, can convert hex dump back to binary.
    So xxd to file, use vim, xxd back to executable
  readelf - looks at the program's organization
  nm - list functions (does not demangle)
  strace - run a program looking for various call names
  gdb - debugger! 
    starti - start debugging, pause at first instruction
    start - start debugging with normal execution
    info proc - get information about process; shows pid
      (in another terminal)
      cat /proc/<pid>/maps - show memory mapped files for the process, includes premissions for the process
        processes can be readable and ( writable or executable )
          A process can be only executable without being readable or writable
  objdump - can decompile a program to see the assembly
      objdump --disassemble=<specific function> -M intel claptrap
      Wow, -M seems to be undocumented. It lets you pick which assembly language to decompile into.
      Allegedly Intel syntax is for those who don't hate themselves. Guess I should use AT&T, eh?

    assembly! (I'm not putting everything in here. Go look up intel syntax on the internets for a full instruction set)
      lea - load effective address
      mov - copies right side address into left side register
        mov rax, QWORD PTR [rsi]

find and replace in neovim!
 :s/word/newword/flags
 you can do a Ctrl+Q to enter keystrokes that are hard to enter otherwise (think of the enter key!)
 :s/\\n/<ctrl+q> Enter/g

Want to do anything with USB connectivity?i
  nix-shell -p usbutils
  lsusb

  platformio run --target upload -e SAMD51_grandcentral_m4

  You can just write to /dev/ttyACM0!

  I might just add this to my configuration.nix

Some more git?

  show diff between staged and last commit:
    git diff --staged origin/phoenix-tester

  you can always do this to see the difference between HEAD and remote:
  git show

  git diff HEAD..origin/phoenix-tester
  git diff HEAD..origin/phoenix-tester --stat
  git show-ref

-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Hey buzzbuzz! It's almost been 3 months. LOOK AT HOW MUCH MAGIC YOU'VE LEARNED! :3

NEOVIM POWERS!
vs (to do a vertical split)
Ctrl+w + hjkl to move between buffers
  BUT IF YOU LOOK DOWN YOU SEE YOU ALREADY HAVE THAT POWER!

Also you learned about mpc123 or whatever it's called. And the power of running audio files from commandline
  There's supposed to be "nvlc" for running audio files commandline-style but it's not in the vlc bundle on nixos :(
    It DOES use SDL_Image though :O
      I feel like I'm getting so close to being a legit wizard
  There's something that I already have on my system but I don't remember what it's called. :(

Github push new branch/repo to remote that doesn't already exist:
  git remote add origin https://github.com/Whatever/repo_name.git
  git remote add origin git@github.com:Whatever/repo_name.git
  git push -u origin master (or main, but we're using master)

BLUETOOH EARBUDS!
  bluetoothctl scan (you may need to go somewhere that doesn't have so much bluetooth noise)
  bluetoothctl pair <MAC ADDRESS>
  bluetoothctl trust <MAC ADDRESS>
  bluetoothctl connect <MAC ADDRESS>
  
When llvm-tools-preview is installed 
  cargo readobj --target <build-target> --bin <name> -- --file-header

/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\/.\

WLAN is softblocked:
  What the hell happened here? I'm not sure. Laptop's been a pain today.
  To fix:
    $ rfkill list
      Confirm that it is, in fact, softblocked
    $ sudo rfkill unblok wlan
  

ECHO $PATH except readable:
tr ':' '\n' <<< "$PATH"
  You can also:
  echo "$PATH" | tr ':' '\n'

Command in nvim for rust builds:
  :let &mkprg = 'make rust'

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Do you want to delete *more* things with a garbage collect?

  nix-collect-garbage -d 

Installed a bad package with dein?

call dein#recache_runtimepath()

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Running a [[bin]] function in rust!
  cargo run --bin phoenix-datalogger

smerge = Sublime Merge
  GUI merge tool installed on in the nix files. Use when you want to see a visual represenataion
    of what is going on in your repo

=========================================================================

YOU GOT VIM POWER!

 while in command mode:
  space + fp = use denite's search to find a file
              you can type in the path to a file to change the search criteria
               hit enter to close the search
               select the file you want to open and hit enter again

  (space + w) + m = run make commands directly in vim.
                    There's some extra setup that I've forgotten. It's something like:
                    : let make ____ = 'cargo build'
  YOU CAN MOVE THE CONSOLE OUTPUT WINDOW AROUND!
  ctrl + w, then H | J| K| L => moves the error window around
            and h | j | k | l => moves the cursor from one window to another

  d + a + (

  Look up "text objects" for additional powers!

  It is in your best interest to review your init.vm for <leader> patterns for extra strength

####################################################################################

Want to make changes to your gui?
  Modify your xmonad.hs file
  Win+Shift+x (win+X) to reload polybar
  Win+shift+a (with+A) to rebuild home-manager and xmonad

  you may also need to 
    systemctl restart display-manager

-----------------------------------
FORGOT TO GIT PULL?
  git pull --rebase
    ^- should solve most of your problems

    You can also:
      git reflog
      git rebase --interactive

      And this is a good combo as well
      git remote update
      git rebase

==========================================================================================
PARTIONING A MICROSD CARD
  nix-shell -p parted
  lsblk -l
  sudo parted /dev/<device_name>
  mklabel gpt
  Do the following as much as needed:
    mkpart <label> ext4 START_OF_PARTITION_LOCATION END_OF_PARTITION_LOCATION
  For as many partitons you've made:
    align-check
      o
     <partition number>
  quit //will save changes

  lsblk //to confirm the devices show up
  sudo mkfs.ext /dev/sda<number> //For as many partitions you've created

  You can now mount any of these partitions! Hooray!

  If you want to access the images after you've flashed them (or directly on the img)

  fdisk -l <image_name>.img
  fdisk -l /dev/<device/partion_name>

------------------------------------------------------------------------------------

Hey, remember that time you broke Eric's /etc/fstab? Yeah, here's how you fixed it:
  Eric did something like this:
    https://www.systutorials.com/bypassing-bad-fstab-failure-while-booting-linux/
    You used this guide mostly: https://linuxconfig.org/howto-mount-usb-drive-in-linux
  Put the micro sd card into  card reader and plug it in to your laptop
  lsblk <- finds connected devices
  sudo fdisk -l <- does this in a different way 
  ^- these commands will let you locate the device and the drive you want to mount

  You created a /media/sdcard directory
  sudo mount /path/to/sdcard /media/sdcard

  And then you can use it like a regular disk. You sudo nvim'd /etc/fstab and deleted the offending line

  WHEW.

  umount /media/sdcard

  You also had to mount onto the Linux OS portation and change cmd<something>.txt and remove:
    init=/bin/sh

To open PDFs from commandline:
  xdg-open <filename>
    Takes up a terminal!
 
nix-garbage-collect => clear your local nix cache and sumlinks
nix-store --delete => clear local hanging paths and not break anything (hopefully)
nix-build --no-out-link --keep-failed /nix/store/fp3j4qz05sj5zxys9f2j2gqy8mqbai2h-linux-5.4.109-rt55-armv7l-unknown-linux-gnueabihf.drv
  \-> build armv7l-unknown-linux-gnueabi from scatch, keep files if the build fails


General ops
========================================================================
neovim plugins
  Add neovim and zsh-prezto do your home.nix if you haven't already got it
   Also, in your dotfiles, add an init.vim; this is where most of the config lives
     Add your plugins in the `:call dein#add('gihub_user/github_project')
     Save and quit
  Open neovim with nvim
    type :call dein#install()
    Wait a bit
     To check for errors do :messages 

1Password:
  Uou can go to invitations. From there, add people by their vital email. Confirm when they have accepted
  Once they have accepted, you can create a new vault for them. This is how we give out logins for the fileserver.
    And possibly other things

Add user to configuration.nix
  Similar to the fileserver and the beast
  You want to create to hash the  passwords you created with 1password
  YOU SOLVED THIS PROBLEM! 
    Use python
    nix-shell -p python3
    python
    import crypt
      crypt.crypt("Password in the clear") will encode the password
      Do the things!

  /etc/nixos/configuration.nix
    find one of the user entries. Duplicate it and update it with the user's new details

FILESERVER!
   All the steps for adding people on the beast, except there are some extra steps!

  smbpasswd -a username 
  In the password prompt: PASTE THE UNHAHSED CLEARTEXT PASSWORD FROM 1PASS
  AMD THEN!
  go to the /etc/nixos/configuration.nix
    There is a list of groups at teh end of the file. You need to add them to the group that their function is associated with
    People generallt don't know what share they need. You need a way to know what their function is and assign directly
      Get their manager to tell you?
      Check the org chart?
      I dunno!
  You need to create an individual user and also add the username to one of the fileserver groups
    then rebuild the nixos
  And *then* you can use the smbpasswd command

diagram for requirements and 
  "why did you do the way you did"
    Check out the templates for the design documents


nix-shell -A shells.rust .

Cyclops ops
# start
(gotta be root)
  ssh marsden.vital.company //Use the same creds as the beast for now!
cd ~cyclops; nohup ./cyclops-controller cyclops-controller.yaml &
 //DON'T FORGET THE AMPERSAND!

nix-build -A device.haskellProject.phoenix-controller.components.exes.phoenix-controller
nix-build -A device.rustProject.phoenix-driver-testbench1
nix-build -A host.haskellProject.cyclops-controller.components.exes.cyclops-controller

krakoa
build.sh magneto.nix
./flash.sh <testbench-X> /dev/mmcblk0 //Works with a particular SD card reader. Don't count on it to be named the same.
./flash.sh <testbench-X> /dev/sda //The result of the lsblk command. Corresponds with the drive/SSD card
lsblk # lists the current usb connected things
screen /dev/ttyUSB0 115200 // Probably don't need it. A way to connect to the beaglebone from a remote terminal. Number is in baud

To log into testbenches, check the 1Password, Software Operations, You're looking for Vital Device Root

If you need to connect to the firewall it has no name. It's the gateway ip.

Polaris initialization error 8 -> usually means "unplug and replug the wires. restart the controller. double check that it's ok"

nix-shell -p "(import ./instrument-client.nix)"
import asyncio
from vital.mystique import *
reads = []
temps = []
async def go():
  async with MystiqueClient("127.0.0.1", read_data=reads, temp_data=temps) as client:
    await client.run_custom_program(program=[track_read(duration=0, sample_count=32, readout_channel=CHANNEL_505, target_light=0.05)], title="local_test")
asyncio.run(go())

Cargo Building!
  nix-build -A device.rustProject.phoenix-driver-testbench1
  nix-build -A device.rustProject.phoenix-driver-testbench1 --no-out-link # otherwise there is a result symlink created as part of the build
   nix-shell -A shells.rust .
  rustup install stable
  rustup target add armv7-unknown-linux-gnueabihf

